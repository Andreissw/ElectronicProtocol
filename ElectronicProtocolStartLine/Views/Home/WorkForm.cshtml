@model ElectronicProtocolStartLine.Class.Orders.HomePage

<head>
    @*<script src="~/Scripts/jquery-3.4.1.intellisense.js"></script>*@
    <script src="~/Scripts/jquery-3.4.1.js"></script>
    <script src="~/Scripts/jquery-3.4.1.min.js"></script>
</head>

<div style="display:flex; align-items:flex-start">
    <div>
        @if (@Session["Name"].ToString().Contains("Володин"))
        {
@Html.ActionLink("Включить мониторинг протокола", "Index", "Monitoring", "", new { @class = "btn btn-info" }) } @*@if (false)
    {
        using (Html.BeginForm("Index", "CreateProtocol", FormMethod.Post))
        {
         <input class="btn btn-warning" style="max-width:400px; width:auto" type="submit" value="Создать протокол" />
        }
    }*@

        @Html.ActionLink("Выйти из учетной записи", "Index", "", htmlAttributes: new { @class = "btn btn-disabled" })
    </div>
    @if (Model.ProtocolsStart.Count != 0)
    {
<div style=" margin-left: 65%">
    <table class="table">
        <thead>

            <tr>
                <th colspan="4">Запущенные протоколы в работе</th>
            </tr>
            <tr>
                <th>
                    Имя заказа
                </th>
                <th>
                    Имя протокола
                </th>
                <th>
                    Сторона
                </th>
                <th>
                    Дата запуска
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.ProtocolsStart)
            {
                <tr>
                    <th>
                        @Html.DisplayFor(c => item.NameOrder)
                    </th>
                    <th>
                        @Html.DisplayFor(c => item.NameProtocol)
                    </th>

                    <th>
                        @Html.DisplayFor(c => item.TOPBOT)
                    </th>
                    <th>
                        @Html.DisplayFor(c => item.DateCreate)
                    </th>
                </tr>
            }
        </tbody>

    </table>
</div>
    }
</div>

@if (TempData["Mess"] != null)
{
    <label class="btn btn-success" style="background-color: yellow; color:black"> @TempData["Mess"].ToString() </label>
}

<h1> Таблица активных заказов </h1>

<div style="display:flex; align-items:center">
    <h4>Фильтр</h4>
    <input type="text" id="myInput" onkeyup="myFunction()" placeholder="Поиск..." title="Type in a name" style="margin-left:1%; max-width: 400px; width:400px;">
</div>


<div>
    <div>

        <table class="table" id="myTable">
            <tbody>
                @*<tr>
                        <td>

                        </td>
                    </tr>*@

                <tr style="background-color: white" class="header">
                    <th>Тип заказа </th>
                    <th>Заказичк </th>
                    <th>Имя Заказа  </th>
                    <th>Дата создания  </th>
                    <th>Протоколы</th>
                    <th></th>
                </tr>


                @foreach (var item in Model.orders)
                {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.TypeClient)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.NameClient)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.NameOrder)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.DateCreate)
        </td>

        <td>
            @if (item.IsSMT)
            {
                <label style="background-color: lightgreen"> SMT </label>
            }
            @if (item.IsFAS)
            {
                <label style="background-color: lightgreen"> FAS </label>
            }
        </td>
        <td class="OpenLot">
            @Html.ActionLink("Открыть Протоколы", "Index", "Lot", new { LOTID = item.ID, mode = "Open" }, new { @class = "btn btn-success", @style = "background-color:cornflowerblue" })
        </td>
    </tr>
}
            </tbody>


        </table>
    </div>
</div>

<div style="margin-top: 3%;">@Html.Action("Index", "Log", new { ProtocolID = 0, top = true })</div>




<style>

    .table {
        font-size: 14px;
        background-color: blanchedalmond;
        width: 100%;
        display: block;
    }

        .table tbody {
            display: block;
            /*height:auto;*/
            max-height: 500px;
            overflow-y: auto;
            overflow-x: hidden;
            width: 100%;
        }

            .table tbody td {
                width: 25%;
            }

        .table tr:nth-child(odd) {
            background-color: aliceblue;
        }
</style>

<script>

    const myFunction = () => {
        const trs = document.querySelectorAll('#myTable tr:not(.header)')
        const filter = document.querySelector('#myInput').value
        const regex = new RegExp(filter, 'i')
        const isFoundInTds = td => regex.test(td.innerHTML)
        const isFound = childrenArr => childrenArr.some(isFoundInTds)
        const setTrStyleDisplay = ({ style, children }) => {
            style.display = isFound([
                ...children // <-- All columns
            ]) ? '' : 'none'
        }

        trs.forEach(setTrStyleDisplay)
    }
</script>


